#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub(crate) enum KeyCode {
    Escape,
    Num1,
    Num2,
    Num3,
    Num4,
    Num5,
    Num6,
    Num7,
    Num8,
    Num9,
    Num0,
    Minus,
    Equal,
    Backspace,
    Tab,
    Q,
    W,
    E,
    R,
    T,
    Y,
    U,
    I,
    O,
    P,
    LeftBracket,
    RightBracket,
    Enter,
    LeftCtrl,
    A,
    S,
    D,
    F,
    G,
    H,
    J,
    K,
    L,
    Semicolon,
    Quote,
    Backtick,
    LeftShift,
    Backslash,
    Z,
    X,
    C,
    V,
    B,
    N,
    M,
    Comma,
    Period,
    Slash,
    RightShift,
    KeypadAsterisk,
    LeftAlt,
    Space,
    CapsLock,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    NumLock,
    ScrollLock,
    Keypad7,
    Keypad8,
    Keypad9,
    KeypadMinus,
    Keypad4,
    Keypad5,
    Keypad6,
    KeypadPlus,
    Keypad1,
    Keypad2,
    Keypad3,
    Keypad0,
    KeypadPeriod,
    F11,
    F12,
    Unknown,
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct KeyEvent {
    pub(crate) key: u8,
    pub(crate) key_code: KeyCode,
}

impl KeyEvent {
    pub fn decode(&self) -> Option<char> {
        let char = match self.key_code {
            KeyCode::Num1 => '1',
            KeyCode::Num2 => '2',
            KeyCode::Num3 => '3',
            KeyCode::Num4 => '4',
            KeyCode::Num5 => '5',
            KeyCode::Num6 => '6',
            KeyCode::Num7 => '7',
            KeyCode::Num8 => '8',
            KeyCode::Num9 => '9',
            KeyCode::Num0 => '0',
            KeyCode::Minus => '-',
            KeyCode::Equal => '=',
            KeyCode::Backspace => '\x08',
            KeyCode::Tab => '\t',
            KeyCode::Q => 'q',
            KeyCode::W => 'w',
            KeyCode::E => 'e',
            KeyCode::R => 'r',
            KeyCode::T => 't',
            KeyCode::Y => 'y',
            KeyCode::U => 'u',
            KeyCode::I => 'i',
            KeyCode::O => 'o',
            KeyCode::P => 'p',
            KeyCode::LeftBracket => '[',
            KeyCode::RightBracket => ']',
            KeyCode::Enter => '\n',
            KeyCode::LeftCtrl => '\x1F',
            KeyCode::A => 'a',
            KeyCode::S => 's',
            KeyCode::D => 'd',
            KeyCode::F => 'f',
            KeyCode::G => 'g',
            KeyCode::H => 'h',
            KeyCode::J => 'j',
            KeyCode::K => 'k',
            KeyCode::L => 'l',
            KeyCode::Semicolon => ';',
            KeyCode::Quote => '\'',
            KeyCode::Backtick => '`',
            KeyCode::LeftShift => '\x1F',
            KeyCode::Backslash => '\\',
            KeyCode::Z => 'z',
            KeyCode::X => 'x',
            KeyCode::C => 'c',
            KeyCode::V => 'v',
            KeyCode::B => 'b',
            KeyCode::N => 'n',
            KeyCode::M => 'm',
            KeyCode::Comma => ',',
            KeyCode::Period => '.',
            KeyCode::Slash => '/',
            KeyCode::KeypadAsterisk => '*',
            KeyCode::Space => ' ',
            KeyCode::Keypad7 => '7',
            KeyCode::Keypad8 => '8',
            KeyCode::Keypad9 => '9',
            KeyCode::KeypadMinus => '-',
            KeyCode::Keypad4 => '4',
            KeyCode::Keypad5 => '5',
            KeyCode::Keypad6 => '6',
            KeyCode::KeypadPlus => '+',
            KeyCode::Keypad1 => '1',
            KeyCode::Keypad2 => '2',
            KeyCode::Keypad3 => '3',
            KeyCode::Keypad0 => '0',
            KeyCode::KeypadPeriod => '.',
            _ => return None,
        };

        Some(char)
    }
}
